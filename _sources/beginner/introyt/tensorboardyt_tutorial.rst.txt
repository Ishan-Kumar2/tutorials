
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/tensorboardyt_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_tensorboardyt_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_tensorboardyt_tutorial.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
**TensorBoard Support** ||
`Training Models <trainingyt.html>`_ ||
`Model Understanding <captumyt.html>`_

PyTorch TensorBoard Support
===========================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=6CEld3hZgqc>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/6CEld3hZgqc" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Before You Start
----------------

To run this tutorial, you’ll need to install PyTorch, TorchVision,
Matplotlib, and TensorBoard.

With ``conda``:

.. code-block:: sh

    conda install pytorch torchvision -c pytorch
    conda install matplotlib tensorboard

With ``pip``:

.. code-block:: sh

    pip install torch torchvision matplotlib tensorboard

Once the dependencies are installed, restart this notebook in the Python
environment where you installed them.


Introduction
------------
 
In this notebook, we’ll be training a variant of LeNet-5 against the
Fashion-MNIST dataset. Fashion-MNIST is a set of image tiles depicting
various garments, with ten class labels indicating the type of garment
depicted. 

.. GENERATED FROM PYTHON SOURCE LINES 53-79

.. code-block:: default


    # PyTorch model and training necessities
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    import torch.optim as optim

    # Image datasets and image manipulation
    import torchvision
    import torchvision.transforms as transforms

    # Image display
    import matplotlib.pyplot as plt
    import numpy as np

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter

    # In case you are using an environment that has TensorFlow installed,
    # such as Google Colab, uncomment the following code to avoid
    # a bug with saving embeddings to your TensorBoard directory

    # import tensorflow as tf
    # import tensorboard as tb
    # tf.io.gfile = tb.compat.tensorflow_stub.io.gfile








.. GENERATED FROM PYTHON SOURCE LINES 80-85

Showing Images in TensorBoard
-----------------------------

Let’s start by adding sample images from our dataset to TensorBoard:


.. GENERATED FROM PYTHON SOURCE LINES 85-136

.. code-block:: default


    # Gather datasets and prepare them for consumption
    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Store separate training and validations splits in ./data
    training_set = torchvision.datasets.FashionMNIST('./data',
        download=True,
        train=True,
        transform=transform)
    validation_set = torchvision.datasets.FashionMNIST('./data',
        download=True,
        train=False,
        transform=transform)

    training_loader = torch.utils.data.DataLoader(training_set,
                                                  batch_size=4,
                                                  shuffle=True,
                                                  num_workers=2)


    validation_loader = torch.utils.data.DataLoader(validation_set,
                                                    batch_size=4,
                                                    shuffle=False,
                                                    num_workers=2)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    # Extract a batch of 4 images
    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)





.. image-sg:: /beginner/introyt/images/sphx_glr_tensorboardyt_tutorial_001.png
   :alt: tensorboardyt tutorial
   :srcset: /beginner/introyt/images/sphx_glr_tensorboardyt_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 65536/26421880 [00:00<01:12, 364024.14it/s]
      0%|          | 131072/26421880 [00:00<01:12, 362285.09it/s]
      1%|          | 196608/26421880 [00:00<01:12, 361624.07it/s]
      1%|          | 262144/26421880 [00:00<01:12, 361583.81it/s]
      1%|1         | 360448/26421880 [00:00<01:01, 425996.91it/s]
      2%|1         | 458752/26421880 [00:01<00:55, 465256.52it/s]
      2%|2         | 557056/26421880 [00:01<00:52, 491071.38it/s]
      3%|2         | 688128/26421880 [00:01<00:45, 563874.61it/s]
      3%|3         | 819200/26421880 [00:01<00:41, 613015.34it/s]
      4%|3         | 950272/26421880 [00:01<00:39, 647799.37it/s]
      4%|4         | 1114112/26421880 [00:01<00:34, 725290.10it/s]
      5%|4         | 1277952/26421880 [00:02<00:32, 779632.99it/s]
      6%|5         | 1474560/26421880 [00:02<00:28, 871659.43it/s]
      6%|6         | 1671168/26421880 [00:02<00:24, 1014325.70it/s]
      7%|6         | 1802240/26421880 [00:02<00:24, 998157.02it/s] 
      8%|7         | 2031616/26421880 [00:02<00:20, 1187244.30it/s]
      8%|8         | 2195456/26421880 [00:02<00:20, 1187051.83it/s]
      9%|9         | 2457600/26421880 [00:03<00:18, 1277505.58it/s]
     10%|#         | 2752512/26421880 [00:03<00:15, 1522396.74it/s]
     11%|#1        | 2949120/26421880 [00:03<00:15, 1494807.54it/s]
     12%|#2        | 3276800/26421880 [00:03<00:13, 1761398.91it/s]
     13%|#3        | 3506176/26421880 [00:03<00:13, 1732473.33it/s]
     15%|#4        | 3899392/26421880 [00:03<00:11, 1907579.85it/s]
     16%|#6        | 4358144/26421880 [00:03<00:10, 2117811.43it/s]
     18%|#8        | 4849664/26421880 [00:04<00:08, 2496690.03it/s]
     19%|#9        | 5144576/26421880 [00:04<00:08, 2400231.78it/s]
     22%|##1       | 5701632/26421880 [00:04<00:07, 2882798.74it/s]
     23%|##2       | 6062080/26421880 [00:04<00:07, 2803706.73it/s]
     25%|##5       | 6684672/26421880 [00:04<00:05, 3330929.01it/s]
     27%|##6       | 7110656/26421880 [00:04<00:05, 3254392.05it/s]
     30%|##9       | 7831552/26421880 [00:04<00:04, 3875672.33it/s]
     31%|###1      | 8290304/26421880 [00:05<00:04, 3716276.47it/s]
     35%|###4      | 9142272/26421880 [00:05<00:03, 4485467.00it/s]
     37%|###6      | 9699328/26421880 [00:05<00:03, 4351247.37it/s]
     40%|####      | 10682368/26421880 [00:05<00:03, 5222705.59it/s]
     43%|####2     | 11304960/26421880 [00:05<00:03, 5019948.23it/s]
     47%|####7     | 12451840/26421880 [00:05<00:02, 6057340.59it/s]
     50%|####9     | 13172736/26421880 [00:05<00:02, 5811924.64it/s]
     55%|#####4    | 14516224/26421880 [00:06<00:01, 7030689.36it/s]
     58%|#####7    | 15302656/26421880 [00:06<00:01, 6731820.42it/s]
     62%|######2   | 16416768/26421880 [00:06<00:01, 7794839.02it/s]
     67%|######7   | 17760256/26421880 [00:06<00:01, 8545611.40it/s]
     71%|#######   | 18743296/26421880 [00:06<00:00, 8120579.27it/s]
     78%|#######8  | 20643840/26421880 [00:06<00:00, 9944482.04it/s]
     82%|########2 | 21790720/26421880 [00:06<00:00, 9450660.11it/s]
     91%|######### | 23953408/26421880 [00:06<00:00, 11453322.85it/s]
     96%|#########5| 25296896/26421880 [00:07<00:00, 10932047.42it/s]
    100%|##########| 26421880/26421880 [00:07<00:00, 3729398.15it/s] 
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 327240.84it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|1         | 65536/4422102 [00:00<00:12, 362424.43it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 683811.82it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2195680.41it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 7637780.50it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 6105969.70it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 42504482.27it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw





.. GENERATED FROM PYTHON SOURCE LINES 137-142

Above, we used TorchVision and Matplotlib to create a visual grid of a
minibatch of our input data. Below, we use the ``add_image()`` call on
``SummaryWriter`` to log the image for consumption by TensorBoard, and
we also call ``flush()`` to make sure it’s written to disk right away.


.. GENERATED FROM PYTHON SOURCE LINES 142-156

.. code-block:: default


    # Default log_dir argument is "runs" - but it's good to be specific
    # torch.utils.tensorboard.SummaryWriter is imported above
    writer = SummaryWriter('runs/fashion_mnist_experiment_1')

    # Write image data to TensorBoard log dir
    writer.add_image('Four Fashion-MNIST Images', img_grid)
    writer.flush()

    # To view, start TensorBoard on the command line with:
    #   tensorboard --logdir=runs
    # ...and open a browser tab to http://localhost:6006/









.. GENERATED FROM PYTHON SOURCE LINES 157-171

If you start TensorBoard at the command line and open it in a new
browser tab (usually at `localhost:6006 <localhost:6006>`__), you should
see the image grid under the IMAGES tab.

Graphing Scalars to Visualize Training
--------------------------------------

TensorBoard is useful for tracking the progress and efficacy of your
training. Below, we’ll run a training loop, track some metrics, and save
the data for TensorBoard’s consumption.

Let’s define a model to categorize our image tiles, and an optimizer and
loss function for training:


.. GENERATED FROM PYTHON SOURCE LINES 171-197

.. code-block:: default


    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    net = Net()
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 198-201

Now let’s train a single epoch, and evaluate the training vs. validation
set losses every 1000 batches:


.. GENERATED FROM PYTHON SOURCE LINES 201-244

.. code-block:: default


    print(len(validation_loader))
    for epoch in range(1):  # loop over the dataset multiple times
        running_loss = 0.0

        for i, data in enumerate(training_loader, 0):
            # basic training loop
            inputs, labels = data
            optimizer.zero_grad()
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            if i % 1000 == 999:    # Every 1000 mini-batches...
                print('Batch {}'.format(i + 1))
                # Check against the validation set
                running_vloss = 0.0
            
                # In evaluation mode some model specific operations can be omitted eg. dropout layer
                net.train(False) # Switching to evaluation mode, eg. turning off regularisation
                for j, vdata in enumerate(validation_loader, 0):
                    vinputs, vlabels = vdata
                    voutputs = net(vinputs)
                    vloss = criterion(voutputs, vlabels)
                    running_vloss += vloss.item()
                net.train(True) # Switching back to training mode, eg. turning on regularisation
            
                avg_loss = running_loss / 1000
                avg_vloss = running_vloss / len(validation_loader)
            
                # Log the running loss averaged per batch
                writer.add_scalars('Training vs. Validation Loss',
                                { 'Training' : avg_loss, 'Validation' : avg_vloss },
                                epoch * len(training_loader) + i)

                running_loss = 0.0
    print('Finished Training')

    writer.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2500
    Batch 1000
    Batch 2000
    Batch 3000
    Batch 4000
    Batch 5000
    Batch 6000
    Batch 7000
    Batch 8000
    Batch 9000
    Batch 10000
    Batch 11000
    Batch 12000
    Batch 13000
    Batch 14000
    Batch 15000
    Finished Training




.. GENERATED FROM PYTHON SOURCE LINES 245-254

Switch to your open TensorBoard and have a look at the SCALARS tab.

Visualizing Your Model
----------------------

TensorBoard can also be used to examine the data flow within your model.
To do this, call the ``add_graph()`` method with a model and sample
input:


.. GENERATED FROM PYTHON SOURCE LINES 254-265

.. code-block:: default


    # Again, grab a single mini-batch of images
    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # add_graph() will trace the sample input through your model,
    # and render it as a graph.
    writer.add_graph(net, images)
    writer.flush()









.. GENERATED FROM PYTHON SOURCE LINES 266-283

When you switch over to TensorBoard, you should see a GRAPHS tab.
Double-click the “NET” node to see the layers and data flow within your
model.

Visualizing Your Dataset with Embeddings
----------------------------------------

The 28-by-28 image tiles we’re using can be modeled as 784-dimensional
vectors (28 \* 28 = 784). It can be instructive to project this to a
lower-dimensional representation. The ``add_embedding()`` method will
project a set of data onto the three dimensions with highest variance,
and display them as an interactive 3D chart. The ``add_embedding()``
method does this automatically by projecting to the three dimensions
with highest variance.

Below, we’ll take a sample of our data, and generate such an embedding:


.. GENERATED FROM PYTHON SOURCE LINES 283-306

.. code-block:: default


    # Select a random subset of data and corresponding labels
    def select_n_random(data, labels, n=100):
        assert len(data) == len(labels)

        perm = torch.randperm(len(data))
        return data[perm][:n], labels[perm][:n]

    # Extract a random subset of data
    images, labels = select_n_random(training_set.data, training_set.targets)

    # get the class labels for each image
    class_labels = [classes[label] for label in labels]

    # log embeddings
    features = images.view(-1, 28 * 28)
    writer.add_embedding(features,
                        metadata=class_labels,
                        label_img=images.unsqueeze(1))
    writer.flush()
    writer.close()









.. GENERATED FROM PYTHON SOURCE LINES 307-328

Now if you switch to TensorBoard and select the PROJECTOR tab, you
should see a 3D representation of the projection. You can rotate and
zoom the model. Examine it at large and small scales, and see whether
you can spot patterns in the projected data and the clustering of
labels.

For better visibility, it’s recommended to:

- Select “label” from the “Color by” drop-down on the left.
- Toggle the Night Mode icon along the top to place the
  light-colored images on a dark background.

Other Resources
---------------

For more information, have a look at:

- PyTorch documentation on `torch.utils.tensorboard.SummaryWriter <https://pytorch.org/docs/stable/tensorboard.html?highlight=summarywriter>`__
- Tensorboard tutorial content in the `PyTorch.org Tutorials <https://pytorch.org/tutorials/>`__ 
- For more information about TensorBoard, see the `TensorBoard
  documentation <https://www.tensorflow.org/tensorboard>`__


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  44.475 seconds)


.. _sphx_glr_download_beginner_introyt_tensorboardyt_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tensorboardyt_tutorial.py <tensorboardyt_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tensorboardyt_tutorial.ipynb <tensorboardyt_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
