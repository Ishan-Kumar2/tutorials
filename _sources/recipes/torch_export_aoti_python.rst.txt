
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


(Beta) ``torch.export`` AOTInductor Tutorial for Python runtime
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 10-30

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 33-38

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 40-46

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 48-62

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 62-102

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     95%|#########5| 42.5M/44.7M [00:00<00:00, 445MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 439MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0461 ms 100.0%
      triton_convolution_0 0.1041 ms 44.3%
      triton_convolution_4 0.1067 ms 43.2%
      triton_convolution_3 0.1274 ms 36.2%
      triton_convolution_1 0.1405 ms 32.8%
      triton_convolution_5 0.1864 ms 24.7%
      triton_convolution_2 0.2188 ms 21.1%
    SingleProcess AUTOTUNE benchmarking takes 0.8275 seconds and 0.0052 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0446 ms 100.0%
      triton_convolution_6 0.0743 ms 60.1%
      triton_convolution_9 0.0753 ms 59.3%
      triton_convolution_12 0.0775 ms 57.6%
      triton_convolution_10 0.0822 ms 54.3%
      triton_convolution_11 0.0832 ms 53.7%
      triton_convolution_8 0.1424 ms 31.3%
      triton_convolution_7 0.1459 ms 30.6%
    SingleProcess AUTOTUNE benchmarking takes 0.9711 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0349 ms 100.0%
      triton_convolution_38 0.0639 ms 54.7%
      triton_convolution_40 0.0820 ms 42.6%
      triton_convolution_34 0.0867 ms 40.3%
      triton_convolution_39 0.0925 ms 37.8%
      triton_convolution_37 0.1072 ms 32.6%
      triton_convolution_35 0.1571 ms 22.2%
      triton_convolution_36 0.3056 ms 11.4%
    SingleProcess AUTOTUNE benchmarking takes 0.9760 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0110 ms 100.0%
      triton_convolution_48 0.0128 ms 86.0%
      triton_convolution_53 0.0129 ms 85.5%
      convolution 0.0134 ms 82.5%
      triton_convolution_54 0.0156 ms 70.6%
      triton_convolution_51 0.0159 ms 69.4%
      triton_convolution_50 0.0464 ms 23.8%
      triton_convolution_49 0.0685 ms 16.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9781 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0433 ms 100.0%
      triton_convolution_59 0.1179 ms 36.8%
      triton_convolution_61 0.1363 ms 31.8%
      triton_convolution_55 0.1667 ms 26.0%
      triton_convolution_60 0.1771 ms 24.5%
      triton_convolution_56 0.1903 ms 22.8%
      triton_convolution_58 0.1952 ms 22.2%
      triton_convolution_57 0.2668 ms 16.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9631 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0369 ms 100.0%
      triton_convolution_73 0.1005 ms 36.8%
      triton_convolution_75 0.1595 ms 23.2%
      triton_convolution_72 0.2028 ms 18.2%
      triton_convolution_70 0.2228 ms 16.6%
      triton_convolution_71 0.2651 ms 13.9%
      triton_convolution_74 0.2852 ms 13.0%
      triton_convolution_69 0.3382 ms 10.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9695 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0120 ms 100.0%
      convolution 0.0203 ms 59.2%
      triton_convolution_88 0.0213 ms 56.4%
      triton_convolution_89 0.0232 ms 51.7%
      triton_convolution_85 0.0329 ms 36.5%
      triton_convolution_86 0.0442 ms 27.2%
      triton_convolution_83 0.1246 ms 9.6%
      triton_convolution_84 0.1424 ms 8.4%
    SingleProcess AUTOTUNE benchmarking takes 1.0113 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0537 ms 100.0%
      triton_convolution_94 0.1858 ms 28.9%
      triton_convolution_92 0.2611 ms 20.6%
      triton_convolution_96 0.2633 ms 20.4%
      triton_convolution_91 0.3732 ms 14.4%
      triton_convolution_93 0.3747 ms 14.3%
      triton_convolution_95 0.5487 ms 9.8%
      triton_convolution_90 0.6536 ms 8.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9493 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0528 ms 100.0%
      triton_convolution_108 0.1925 ms 27.4%
      triton_convolution_106 0.2817 ms 18.8%
      triton_convolution_110 0.2932 ms 18.0%
      triton_convolution_105 0.3836 ms 13.8%
      triton_convolution_107 0.3892 ms 13.6%
      triton_convolution_109 0.5599 ms 9.4%
      triton_convolution_104 0.6847 ms 7.7%
    SingleProcess AUTOTUNE benchmarking takes 0.9554 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0182 ms 100.0%
      convolution 0.0259 ms 70.3%
      triton_convolution_120 0.0336 ms 54.2%
      triton_convolution_124 0.0830 ms 21.9%
      triton_convolution_123 0.0860 ms 21.2%
      triton_convolution_121 0.1256 ms 14.5%
      triton_convolution_118 0.2674 ms 6.8%
      triton_convolution_119 0.2807 ms 6.5%
    SingleProcess AUTOTUNE benchmarking takes 1.0146 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0860 ms 100.0%
      triton_convolution_127 0.2797 ms 30.8%
      triton_convolution_129 0.3601 ms 23.9%
      triton_convolution_131 0.4245 ms 20.3%
      triton_convolution_126 0.4833 ms 17.8%
      triton_convolution_128 0.7230 ms 11.9%
      triton_convolution_130 1.0993 ms 7.8%
      triton_convolution_125 1.4519 ms 5.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9562 seconds and 0.0005 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0156 ms 100.0%
      triton_mm_142 0.0220 ms 70.8%
      triton_mm_153 0.0304 ms 51.3%
      triton_mm_152 0.0306 ms 50.9%
      triton_mm_141 0.0308 ms 50.6%
      triton_mm_146 0.0311 ms 50.1%
      triton_mm_139 0.0345 ms 45.1%
      triton_mm_145 0.0372 ms 41.9%
      triton_mm_144 0.0462 ms 33.7%
      triton_mm_148 0.0498 ms 31.3%
    SingleProcess AUTOTUNE benchmarking takes 1.8351 seconds and 0.0009 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 103-114

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 114-128

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 129-150

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 150-179

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 180-181

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.78 ms




.. GENERATED FROM PYTHON SOURCE LINES 193-194

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 194-207

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 6985.04 ms




.. GENERATED FROM PYTHON SOURCE LINES 208-210

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 212-221

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.866 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
