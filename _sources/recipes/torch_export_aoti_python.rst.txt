
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


.. meta::
   :description: An end-to-end example of how to use AOTInductor for Python runtime.
   :keywords: torch.export, AOTInductor, torch._inductor.aot_compile, torch._export.aot_load

``torch.export`` AOTInductor Tutorial for Python runtime (Beta)
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for Python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 44-50

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 52-66

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 66-106

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     96%|#########5| 42.8M/44.7M [00:00<00:00, 447MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 441MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0465 ms 100.0%
      triton_convolution_0 0.1036 ms 44.9%
      triton_convolution_4 0.1065 ms 43.7%
      triton_convolution_3 0.1273 ms 36.6%
      triton_convolution_1 0.1405 ms 33.1%
      triton_convolution_5 0.1862 ms 25.0%
      triton_convolution_2 0.2192 ms 21.2%
    SingleProcess AUTOTUNE benchmarking takes 0.7839 seconds and 0.0114 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0442 ms 100.0%
      triton_convolution_6 0.0744 ms 59.4%
      triton_convolution_9 0.0756 ms 58.5%
      triton_convolution_12 0.0773 ms 57.2%
      triton_convolution_11 0.0824 ms 53.7%
      triton_convolution_10 0.0829 ms 53.3%
      triton_convolution_7 0.1365 ms 32.4%
      triton_convolution_8 0.1428 ms 31.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9660 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0344 ms 100.0%
      triton_convolution_38 0.0636 ms 54.0%
      triton_convolution_40 0.0818 ms 42.0%
      triton_convolution_34 0.0865 ms 39.7%
      triton_convolution_39 0.0917 ms 37.5%
      triton_convolution_37 0.1071 ms 32.1%
      triton_convolution_35 0.1487 ms 23.1%
      triton_convolution_36 0.3052 ms 11.3%
    SingleProcess AUTOTUNE benchmarking takes 0.9786 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0113 ms 100.0%
      triton_convolution_53 0.0121 ms 93.4%
      triton_convolution_48 0.0125 ms 90.1%
      convolution 0.0135 ms 83.6%
      triton_convolution_54 0.0150 ms 75.4%
      triton_convolution_51 0.0155 ms 72.8%
      triton_convolution_50 0.0459 ms 24.6%
      triton_convolution_49 0.0594 ms 19.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9777 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0435 ms 100.0%
      triton_convolution_59 0.1183 ms 36.8%
      triton_convolution_61 0.1358 ms 32.0%
      triton_convolution_55 0.1664 ms 26.1%
      triton_convolution_60 0.1767 ms 24.6%
      triton_convolution_56 0.1898 ms 22.9%
      triton_convolution_58 0.1955 ms 22.2%
      triton_convolution_57 0.2672 ms 16.3%
    SingleProcess AUTOTUNE benchmarking takes 0.9649 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0370 ms 100.0%
      triton_convolution_73 0.0987 ms 37.5%
      triton_convolution_75 0.1591 ms 23.3%
      triton_convolution_72 0.2037 ms 18.2%
      triton_convolution_70 0.2147 ms 17.2%
      triton_convolution_71 0.2657 ms 13.9%
      triton_convolution_74 0.2838 ms 13.0%
      triton_convolution_69 0.3377 ms 11.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9673 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0125 ms 100.0%
      convolution 0.0203 ms 61.4%
      triton_convolution_88 0.0213 ms 58.6%
      triton_convolution_89 0.0224 ms 55.8%
      triton_convolution_85 0.0332 ms 37.5%
      triton_convolution_86 0.0397 ms 31.4%
      triton_convolution_83 0.1208 ms 10.3%
      triton_convolution_84 0.1376 ms 9.1%
    SingleProcess AUTOTUNE benchmarking takes 1.0130 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0537 ms 100.0%
      triton_convolution_94 0.1871 ms 28.7%
      triton_convolution_92 0.2606 ms 20.6%
      triton_convolution_96 0.2627 ms 20.4%
      triton_convolution_91 0.3721 ms 14.4%
      triton_convolution_93 0.3743 ms 14.3%
      triton_convolution_95 0.5477 ms 9.8%
      triton_convolution_90 0.6531 ms 8.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9504 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0532 ms 100.0%
      triton_convolution_108 0.1926 ms 27.6%
      triton_convolution_106 0.2818 ms 18.9%
      triton_convolution_110 0.2932 ms 18.1%
      triton_convolution_105 0.3824 ms 13.9%
      triton_convolution_107 0.3897 ms 13.6%
      triton_convolution_109 0.5600 ms 9.5%
      triton_convolution_104 0.6836 ms 7.8%
    SingleProcess AUTOTUNE benchmarking takes 0.9567 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0181 ms 100.0%
      convolution 0.0257 ms 70.4%
      triton_convolution_120 0.0334 ms 54.1%
      triton_convolution_124 0.0800 ms 22.6%
      triton_convolution_123 0.0882 ms 20.5%
      triton_convolution_121 0.1228 ms 14.7%
      triton_convolution_118 0.2679 ms 6.7%
      triton_convolution_119 0.2796 ms 6.5%
    SingleProcess AUTOTUNE benchmarking takes 1.0157 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0857 ms 100.0%
      triton_convolution_127 0.2790 ms 30.7%
      triton_convolution_129 0.3612 ms 23.7%
      triton_convolution_131 0.4239 ms 20.2%
      triton_convolution_126 0.4847 ms 17.7%
      triton_convolution_128 0.7236 ms 11.8%
      triton_convolution_130 1.0994 ms 7.8%
      triton_convolution_125 1.4568 ms 5.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9561 seconds and 0.0005 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0159 ms 100.0%
      triton_mm_142 0.0216 ms 73.8%
      triton_mm_153 0.0304 ms 52.4%
      triton_mm_141 0.0305 ms 52.2%
      triton_mm_152 0.0308 ms 51.8%
      triton_mm_146 0.0314 ms 50.8%
      triton_mm_139 0.0345 ms 46.2%
      triton_mm_145 0.0372 ms 42.8%
      triton_mm_144 0.0459 ms 34.7%
      triton_mm_148 0.0499 ms 32.0%
    SingleProcess AUTOTUNE benchmarking takes 1.8302 seconds and 0.0009 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 133-154

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 154-183

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 184-185

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.89 ms




.. GENERATED FROM PYTHON SOURCE LINES 197-198

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 7090.50 ms




.. GENERATED FROM PYTHON SOURCE LINES 212-214

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 216-225

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.963 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
