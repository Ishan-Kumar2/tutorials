
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


.. meta::
   :description: An end-to-end example of how to use AOTInductor for Python runtime.
   :keywords: torch.export, AOTInductor, torch._inductor.aot_compile, torch._export.aot_load

``torch.export`` AOTInductor Tutorial for Python runtime (Beta)
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for Python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 44-50

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 52-66

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 66-106

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     93%|#########3| 41.8M/44.7M [00:00<00:00, 437MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 431MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0468 ms 100.0%
      triton_convolution_0 0.1048 ms 44.6%
      triton_convolution_4 0.1075 ms 43.5%
      triton_convolution_3 0.1282 ms 36.5%
      triton_convolution_1 0.1409 ms 33.2%
      triton_convolution_5 0.1865 ms 25.1%
      triton_convolution_2 0.2201 ms 21.3%
    SingleProcess AUTOTUNE benchmarking takes 0.8025 seconds and 0.0042 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0448 ms 100.0%
      triton_convolution_9 0.0747 ms 59.9%
      triton_convolution_6 0.0750 ms 59.7%
      triton_convolution_12 0.0779 ms 57.5%
      triton_convolution_11 0.0855 ms 52.3%
      triton_convolution_10 0.0857 ms 52.2%
      triton_convolution_7 0.1365 ms 32.8%
      triton_convolution_8 0.1427 ms 31.4%
    SingleProcess AUTOTUNE benchmarking takes 0.9698 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0348 ms 100.0%
      triton_convolution_38 0.0629 ms 55.3%
      triton_convolution_40 0.0824 ms 42.2%
      triton_convolution_34 0.0872 ms 39.9%
      triton_convolution_39 0.0924 ms 37.7%
      triton_convolution_37 0.1074 ms 32.4%
      triton_convolution_35 0.1419 ms 24.5%
      triton_convolution_36 0.3055 ms 11.4%
    SingleProcess AUTOTUNE benchmarking takes 0.9781 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0115 ms 100.0%
      triton_convolution_53 0.0128 ms 89.5%
      triton_convolution_48 0.0131 ms 87.7%
      convolution 0.0138 ms 83.3%
      triton_convolution_54 0.0156 ms 73.7%
      triton_convolution_51 0.0164 ms 69.9%
      triton_convolution_50 0.0467 ms 24.5%
      triton_convolution_49 0.0663 ms 17.3%
    SingleProcess AUTOTUNE benchmarking takes 0.9796 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0444 ms 100.0%
      triton_convolution_59 0.1177 ms 37.7%
      triton_convolution_61 0.1362 ms 32.6%
      triton_convolution_55 0.1660 ms 26.8%
      triton_convolution_60 0.1772 ms 25.1%
      triton_convolution_56 0.1907 ms 23.3%
      triton_convolution_58 0.1950 ms 22.8%
      triton_convolution_57 0.2677 ms 16.6%
    SingleProcess AUTOTUNE benchmarking takes 0.9611 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0375 ms 100.0%
      triton_convolution_73 0.0995 ms 37.7%
      triton_convolution_75 0.1600 ms 23.4%
      triton_convolution_72 0.2034 ms 18.4%
      triton_convolution_70 0.2154 ms 17.4%
      triton_convolution_71 0.2654 ms 14.1%
      triton_convolution_74 0.2858 ms 13.1%
      triton_convolution_69 0.3381 ms 11.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9703 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0129 ms 100.0%
      convolution 0.0209 ms 61.6%
      triton_convolution_88 0.0219 ms 58.8%
      triton_convolution_89 0.0225 ms 57.1%
      triton_convolution_85 0.0335 ms 38.4%
      triton_convolution_86 0.0368 ms 35.0%
      triton_convolution_83 0.1169 ms 11.0%
      triton_convolution_84 0.1369 ms 9.4%
    SingleProcess AUTOTUNE benchmarking takes 1.0131 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0549 ms 100.0%
      triton_convolution_94 0.1859 ms 29.6%
      triton_convolution_92 0.2607 ms 21.1%
      triton_convolution_96 0.2633 ms 20.9%
      triton_convolution_91 0.3719 ms 14.8%
      triton_convolution_93 0.3753 ms 14.6%
      triton_convolution_95 0.5471 ms 10.0%
      triton_convolution_90 0.6540 ms 8.4%
    SingleProcess AUTOTUNE benchmarking takes 0.9514 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0550 ms 100.0%
      triton_convolution_108 0.1941 ms 28.4%
      triton_convolution_106 0.2821 ms 19.5%
      triton_convolution_110 0.2940 ms 18.7%
      triton_convolution_105 0.3832 ms 14.4%
      triton_convolution_107 0.3900 ms 14.1%
      triton_convolution_109 0.5601 ms 9.8%
      triton_convolution_104 0.6878 ms 8.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9555 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0184 ms 100.0%
      convolution 0.0263 ms 70.0%
      triton_convolution_120 0.0337 ms 54.6%
      triton_convolution_124 0.0799 ms 23.0%
      triton_convolution_123 0.0876 ms 21.0%
      triton_convolution_121 0.1232 ms 14.9%
      triton_convolution_118 0.2682 ms 6.9%
      triton_convolution_119 0.2791 ms 6.6%
    SingleProcess AUTOTUNE benchmarking takes 1.0114 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0868 ms 100.0%
      triton_convolution_127 0.2806 ms 30.9%
      triton_convolution_129 0.3613 ms 24.0%
      triton_convolution_131 0.4252 ms 20.4%
      triton_convolution_126 0.4847 ms 17.9%
      triton_convolution_128 0.7239 ms 12.0%
      triton_convolution_130 1.0995 ms 7.9%
      triton_convolution_125 1.4569 ms 6.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9576 seconds and 0.0006 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0161 ms 100.0%
      triton_mm_142 0.0224 ms 71.9%
      triton_mm_152 0.0307 ms 52.4%
      triton_mm_141 0.0311 ms 51.7%
      triton_mm_153 0.0311 ms 51.7%
      triton_mm_146 0.0315 ms 51.1%
      triton_mm_139 0.0350 ms 45.9%
      triton_mm_145 0.0378 ms 42.6%
      triton_mm_144 0.0461 ms 34.9%
      triton_mm_148 0.0505 ms 31.9%
    SingleProcess AUTOTUNE benchmarking takes 1.8354 seconds and 0.0010 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 133-154

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 154-183

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 184-185

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.80 ms




.. GENERATED FROM PYTHON SOURCE LINES 197-198

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 7089.93 ms




.. GENERATED FROM PYTHON SOURCE LINES 212-214

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 216-225

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.088 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
