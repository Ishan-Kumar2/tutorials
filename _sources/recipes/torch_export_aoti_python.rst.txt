
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


.. meta::
   :description: An end-to-end example of how to use AOTInductor for Python runtime.
   :keywords: torch.export, AOTInductor, torch._inductor.aot_compile, torch._export.aot_load

``torch.export`` AOTInductor Tutorial for Python runtime (Beta)
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for Python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 44-50

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 52-66

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 66-106

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     80%|#######9  | 35.6M/44.7M [00:00<00:00, 373MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 381MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0458 ms 100.0%
      triton_convolution_0 0.1036 ms 44.2%
      triton_convolution_4 0.1067 ms 43.0%
      triton_convolution_3 0.1274 ms 36.0%
      triton_convolution_1 0.1398 ms 32.8%
      triton_convolution_5 0.1854 ms 24.7%
      triton_convolution_2 0.2192 ms 20.9%
    SingleProcess AUTOTUNE benchmarking takes 0.7885 seconds and 0.0117 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0440 ms 100.0%
      triton_convolution_6 0.0736 ms 59.8%
      triton_convolution_9 0.0752 ms 58.5%
      triton_convolution_12 0.0775 ms 56.8%
      triton_convolution_11 0.0830 ms 53.0%
      triton_convolution_10 0.0832 ms 52.9%
      triton_convolution_7 0.1333 ms 33.0%
      triton_convolution_8 0.1414 ms 31.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9676 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0337 ms 100.0%
      triton_convolution_38 0.0626 ms 53.8%
      triton_convolution_40 0.0823 ms 40.9%
      triton_convolution_34 0.0871 ms 38.7%
      triton_convolution_39 0.0911 ms 37.0%
      triton_convolution_37 0.1065 ms 31.6%
      triton_convolution_35 0.1413 ms 23.8%
      triton_convolution_36 0.3052 ms 11.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9775 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0106 ms 100.0%
      triton_convolution_53 0.0122 ms 87.1%
      triton_convolution_48 0.0126 ms 84.5%
      convolution 0.0128 ms 83.0%
      triton_convolution_54 0.0153 ms 69.6%
      triton_convolution_51 0.0156 ms 68.0%
      triton_convolution_50 0.0459 ms 23.2%
      triton_convolution_49 0.0607 ms 17.5%
    SingleProcess AUTOTUNE benchmarking takes 0.9756 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0428 ms 100.0%
      triton_convolution_59 0.1178 ms 36.4%
      triton_convolution_61 0.1360 ms 31.5%
      triton_convolution_55 0.1660 ms 25.8%
      triton_convolution_60 0.1771 ms 24.2%
      triton_convolution_56 0.1897 ms 22.6%
      triton_convolution_58 0.1952 ms 21.9%
      triton_convolution_57 0.2671 ms 16.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9608 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0367 ms 100.0%
      triton_convolution_73 0.0988 ms 37.1%
      triton_convolution_75 0.1597 ms 23.0%
      triton_convolution_72 0.2036 ms 18.0%
      triton_convolution_70 0.2153 ms 17.0%
      triton_convolution_71 0.2645 ms 13.9%
      triton_convolution_74 0.2847 ms 12.9%
      triton_convolution_69 0.3382 ms 10.8%
    SingleProcess AUTOTUNE benchmarking takes 0.9693 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0123 ms 100.0%
      convolution 0.0200 ms 61.5%
      triton_convolution_88 0.0215 ms 57.1%
      triton_convolution_89 0.0222 ms 55.4%
      triton_convolution_85 0.0324 ms 38.0%
      triton_convolution_86 0.0357 ms 34.4%
      triton_convolution_83 0.1166 ms 10.5%
      triton_convolution_84 0.1366 ms 9.0%
    SingleProcess AUTOTUNE benchmarking takes 1.0114 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0526 ms 100.0%
      triton_convolution_94 0.1836 ms 28.7%
      triton_convolution_92 0.2605 ms 20.2%
      triton_convolution_96 0.2626 ms 20.0%
      triton_convolution_91 0.3711 ms 14.2%
      triton_convolution_93 0.3746 ms 14.1%
      triton_convolution_95 0.5476 ms 9.6%
      triton_convolution_90 0.6539 ms 8.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9505 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0522 ms 100.0%
      triton_convolution_108 0.1921 ms 27.2%
      triton_convolution_106 0.2820 ms 18.5%
      triton_convolution_110 0.2937 ms 17.8%
      triton_convolution_105 0.3825 ms 13.6%
      triton_convolution_107 0.3887 ms 13.4%
      triton_convolution_109 0.5596 ms 9.3%
      triton_convolution_104 0.6852 ms 7.6%
    SingleProcess AUTOTUNE benchmarking takes 0.9527 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0175 ms 100.0%
      convolution 0.0256 ms 68.4%
      triton_convolution_120 0.0328 ms 53.5%
      triton_convolution_124 0.0795 ms 22.0%
      triton_convolution_123 0.0965 ms 18.2%
      triton_convolution_121 0.1217 ms 14.4%
      triton_convolution_118 0.2710 ms 6.5%
      triton_convolution_119 0.2790 ms 6.3%
    SingleProcess AUTOTUNE benchmarking takes 1.0224 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0854 ms 100.0%
      triton_convolution_127 0.2813 ms 30.4%
      triton_convolution_129 0.3597 ms 23.7%
      triton_convolution_131 0.4238 ms 20.2%
      triton_convolution_126 0.4839 ms 17.7%
      triton_convolution_128 0.7223 ms 11.8%
      triton_convolution_130 1.0995 ms 7.8%
      triton_convolution_125 1.4544 ms 5.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9561 seconds and 0.0005 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0152 ms 100.0%
      triton_mm_142 0.0213 ms 71.3%
      triton_mm_152 0.0300 ms 50.6%
      triton_mm_141 0.0302 ms 50.3%
      triton_mm_153 0.0304 ms 49.9%
      triton_mm_146 0.0306 ms 49.6%
      triton_mm_139 0.0344 ms 44.1%
      triton_mm_145 0.0375 ms 40.5%
      triton_mm_144 0.0453 ms 33.5%
      triton_mm_148 0.0500 ms 30.4%
    SingleProcess AUTOTUNE benchmarking takes 1.8285 seconds and 0.0009 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 133-154

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 154-183

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 184-185

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.77 ms




.. GENERATED FROM PYTHON SOURCE LINES 197-198

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 7041.65 ms




.. GENERATED FROM PYTHON SOURCE LINES 212-214

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 216-225

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  28.230 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
